import java.io.*;
import java.util.*;

/* Daniel Bukowski     Nick Nazari
 * 5/3/19
 * bookMash Hash version
 * 
 * An input file is given, and the program puts its unique words into a hashmap
 * Each word that follows each word is appended to a linked list.
 * A new file is generated by writing a random word followed by a random word from its 
 * corresponding linked list. The next word is from the previous word's linked list.
 * 
 */

public class randomwriterHash {
  public static void main(String[] args) throws IOException {
    String sourceFileName = args[0];
    String outputFileName = args[1];
    int N = Integer.parseInt(args[2]);

    long phase1startTime = System.currentTimeMillis();
    long phase1stopTime;
    long phase2startTime;
    long phase2stopTime;

    File inputFile = new File(sourceFileName);
    Scanner scan = new Scanner(inputFile);

    // creating list of unique words & creating lists for each word
    int uniqueLength = 0;

    HashMap<String, LinkedList<String>> words = new HashMap<String, LinkedList<String>>();
    String word = null;
    String fWord = null; // first word added
    String lWord = null; // last word added
    if (scan.hasNext()) {
      word = scan.next();
      fWord = word;
      words.put(word, new LinkedList<String>());
      uniqueLength++;
    }
    while (scan.hasNext()) {
      word = scan.next();
      if (!(words.containsKey(word))) {
        words.put(word, new LinkedList<String>());
        uniqueLength++;
      }
    }
    lWord = word;

    // stopped here
    // adding following words to each unique word
    Scanner input = new Scanner(inputFile);
    String firstWord = input.next();
    String secondWord;
    while (input.hasNext()) {
      secondWord = input.next();
      // adding secondWord to firstWord's LL
      words.get(firstWord).add(secondWord);
      firstWord = secondWord;
    }
    // System.out.println( words);
    // accounting for last word of file
    if (words.get(lWord).isEmpty()) {
      words.get(lWord).add(fWord);
    }

    phase1stopTime = System.currentTimeMillis();
    phase2startTime = System.currentTimeMillis();

    ////////////////////
    // new text creation/output
    PrintWriter out = new PrintWriter(new FileWriter(outputFileName));

    Random rand = new Random();
    int rn = rand.nextInt(uniqueLength); // 1
    String printWord = (String) words.keySet().toArray()[rn];
    out.print(printWord); // 2

    for (int i = 1; i < N; i++) {
      LinkedList<String> LL = words.get(printWord);
      int nrn = rand.nextInt(LL.size());
      printWord = LL.get(nrn);
      out.print(" " + printWord);
    }

    out.flush();
    out.close();
    scan.close();
    input.close();

    phase2stopTime = System.currentTimeMillis();
    System.out.println("Phase 1 terminated in " + (phase1stopTime - phase1startTime) + " milliseconds.");
    System.out
        .println("Phase 2 (output generation) terminated in " + (phase2stopTime - phase2startTime) + " milliseconds.");
  }
}